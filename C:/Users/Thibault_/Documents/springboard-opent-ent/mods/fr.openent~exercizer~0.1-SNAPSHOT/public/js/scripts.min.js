routes.define(function ($routeProvider) {
    $routeProvider
        .when('/teacher/home', {
        action: 'teacherHome'
    })
        .when('/teacher/subject/create', {
        action: 'teacherSubjectCreate'
    })
        .when('/teacher/subject/edit', {
        action: 'teacherSubjectEdit'
    })
        .otherwise({
        redirectTo: '/teacher/home'
    });
});
var directives = [];
var controllers = [];
var services = [];
function ExercizerController($scope, $rootScope, model, template, route, date, $route) {
    route({
        teacherHome: function (params) {
            template.open('main', 'teacher-home');
        },
        teacherSubjectCreate: function (params) {
            template.open('main', 'teacher-subject-create');
        },
        teacherSubjectEdit: function (params) {
            template.open('main', 'teacher-subject-edit');
        }
    });
    $route.reload();
}
window.AngularExtensions = {
    init: function (module) {
        module.constant("serverUrl", "http://foo.com");
        module.service('SubjectService', SubjectService);
        module.service('GrainService', GrainService);
        module.service('GrainTypeService', GrainTypeService);
        module.service('SimpleAnswerService', SimpleAnswerService);
        module.service('GrainCopyService', GrainCopyService);
        module.service('GrainScheduledService', GrainScheduledService);
        module.service('StatementService', StatementService);
        module.controller('TeacherHomeCtrl', TeacherHomeCtrl);
        module.controller('TeacherCreateSubjectCtrl', TeacherCreateSubjectCtrl);
        module.controller('TeacherEditSubjectCtrl', TeacherEditSubjectCtrl);
        directives.forEach(function (item) {
            module.directive(item.name, item.injections);
        });
        module.directive("editQuestionTitle", editQuestionTitle);
        module.directive("editQuestionStatement", editQuestionStatement);
        module.directive("editQuestionMaxScore", editQuestionMaxScore);
        module.directive("editQuestionAddDocument", editQuestionAddDocument);
        module.directive("editQuestionHint", editQuestionHint);
        module.directive("editQuestionCorrection", editQuestionCorrection);
        module.directive("exercizerHelp", exercizerHelp);
        module.directive("exercizerFold", exercizerFold);
    }
};
var TeacherCreateSubjectCtrl = (function () {
    function TeacherCreateSubjectCtrl($location, SubjectService) {
        this.$location = $location;
        this.subjectService = SubjectService;
    }
    TeacherCreateSubjectCtrl.prototype.clickSaveSubject = function () {
        var self = this;
        this.subjectService.createSubject(this.subject, function (data) {
            self.$location.path('/teacher/subject/edit');
        }, function (err) {
            console.error(err);
        });
    };
    TeacherCreateSubjectCtrl.$inject = [
        '$location',
        'SubjectService',
    ];
    return TeacherCreateSubjectCtrl;
}());
var TeacherEditSubjectCtrl = (function () {
    function TeacherEditSubjectCtrl(GrainService, SubjectService, GrainTypeService) {
        this.grainService = GrainService;
        this.subjectService = SubjectService;
        this.grainTypeService = GrainTypeService;
    }
    Object.defineProperty(TeacherEditSubjectCtrl.prototype, "grainListByCurrentSubject", {
        get: function () {
            var subject_id = this.subjectService.currentSubjectId;
            return this.grainService.grainListBySubjectId(subject_id);
        },
        enumerable: true,
        configurable: true
    });
    TeacherEditSubjectCtrl.prototype.isNewGrain = function (grain) {
        if (grain) {
            if (grain.grain_type_id) {
                return "grain";
            }
            else {
                return "new";
            }
        }
    };
    TeacherEditSubjectCtrl.prototype.getTypeNameByTypeId = function (id) {
        return this.grainTypeService.getTypeNameByTypeId(id);
    };
    TeacherEditSubjectCtrl.$inject = [
        'GrainService',
        'SubjectService',
        'GrainTypeService'
    ];
    return TeacherEditSubjectCtrl;
}());
var TeacherHomeCtrl = (function () {
    function TeacherHomeCtrl($location) {
        this.$location = $location;
        console.log('TeacherHomeCtrl');
    }
    TeacherHomeCtrl.prototype.clickCreateNewSubject = function () {
        console.log('clickCreateNewSubject');
        this.$location.path('/teacher/subject/create');
    };
    ;
    TeacherHomeCtrl.$inject = [
        '$location',
    ];
    return TeacherHomeCtrl;
}());
directives.push({
    name: "addOneElement",
    injections: ['GrainService', 'SubjectService', function (GrainService, SubjectService) {
            return {
                restrict: "E",
                templateUrl: 'exercizer/public/app/templates/directives/addOneElement.html',
                link: function (scope, element, attrs) {
                    scope.clickCreateNewGrain = function () {
                        var grain = GrainService.createObjectGrain();
                        var subject_id = SubjectService.currentSubjectId;
                        grain.subject_id = subject_id;
                        GrainService.createGrain(grain, function (data) {
                            console.info('Grain created', data);
                        }, function (err) {
                            console.error(err);
                        });
                    };
                }
            };
        }]
});
var exercizerFold = [function () {
        return {
            restrict: "E",
            templateUrl: 'exercizer/public/app/templates/directives/exercizerFold.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var exercizerHelp = [function () {
        return {
            restrict: "E",
            templateUrl: 'exercizer/public/app/templates/directives/exercizerHelp.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
directives.push({
    name: "newGrain",
    injections: ['GrainTypeService', 'GrainService', function (GrainTypeService, GrainService) {
            return {
                restrict: "E",
                scope: {
                    grain: '='
                },
                templateUrl: 'exercizer/public/app/templates/directives/newGrain.html',
                link: function (scope, element, attrs) {
                    scope.state = 'statementOrQuestion';
                    scope.clickStatement = function () {
                        var grain_type_id = GrainTypeService.getTypeIdByTypeName("statement");
                        scope.grain.grain_type_id = grain_type_id;
                    };
                    scope.clickQuestion = function () {
                        scope.state = 'choiceExerciseType';
                    };
                    scope.exerciseTypeList = function () {
                        return GrainTypeService.exerciseTypeList;
                    };
                    scope.clickExerciseType = function (type) {
                        scope.grain.grain_type_id = type.id;
                        GrainService.updateGrain(scope.grain, function (data) {
                            console.info('Grain updated', data);
                        }, function (err) {
                            console.error(err);
                        });
                    };
                }
            };
        }]
});
directives.push({
    name: "subjectOrganizer",
    injections: [function () {
            return {
                restrict: "E",
                templateUrl: 'exercizer/public/app/templates/directives/subjectOrganizer.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
directives.push({
    name: 'subjectsTree',
    injections: [function () {
            return {
                restrict: 'E',
                templateUrl: 'exercizer/public/app/templates/directives/subjectsTree.html',
                link: function (scope, element, attrs) {
                    scope.showCreateFolder = attrs.showCreateFolder === 'true';
                }
            };
        }]
});
var CopyService = (function () {
    function CopyService(serverUrl, $http) {
        this.serverUrl = serverUrl;
        this.$http = $http;
        this._isSetCopyList = false;
        this._copyList = [];
    }
    Object.defineProperty(CopyService.prototype, "copyList", {
        get: function () {
            return this._copyList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CopyService.prototype, "isSetCopyList", {
        get: function () {
            return this._isSetCopyList;
        },
        set: function (value) {
            this._isSetCopyList = value;
        },
        enumerable: true,
        configurable: true
    });
    CopyService.prototype.addCopyToCopyList = function (copy) {
        if (this._copyList[copy.id]) {
        }
        this._copyList[copy.id] = copy;
    };
    CopyService.prototype.getCopyList = function (params, callbackSuccess, callbackFail) {
        var self = this;
        if (this._isSetCopyList) {
            callbackSuccess(this._copyList);
        }
        else {
            this._getCopyList(params, function (data) {
                self._copyList = data;
                self._isSetCopyList = true;
                callbackSuccess(data);
            }, callbackFail());
        }
    };
    CopyService.prototype._getCopyList = function (params, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'GET',
            url: self.serverUrl + '/copies/get',
            params: {
                "user_id": params.user.id,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    CopyService.$inject = [
        'serverUrl',
        '$http'
    ];
    return CopyService;
}());
var GrainCopyService = (function () {
    function GrainCopyService(serverUrl, $http) {
        this.serverUrl = serverUrl;
        this.$http = $http;
        this._grainCopyList = [];
        this._isSetGrainCopyList = [];
    }
    GrainCopyService.prototype.grainCopyListBySubjectId = function (subject_id) {
        return this._isSetGrainCopyList[subject_id] ? this._grainCopyList[subject_id] : [];
    };
    GrainCopyService.prototype.isSetGrainCopyListBySubjectId = function (subject_id) {
        return !!this._isSetGrainCopyList[subject_id];
    };
    GrainCopyService.prototype.getGrainCopyListBySubjectId = function (subject_id, callbackSuccess, callbackFail) {
        var self = this;
        if (this._isSetGrainCopyList[subject_id]) {
            callbackSuccess(this._grainCopyList[subject_id]);
        }
        else {
            this._getGrainCopyListBySubjectId(subject_id, function (data) {
                self._grainCopyList[subject_id] = data;
                self._isSetGrainCopyList[subject_id] = true;
                callbackSuccess(data);
            }, callbackFail());
        }
    };
    GrainCopyService.prototype.createObjectGrainCopyData = function () {
        var grain_copy_data = {
            title: null,
            max_score: null,
            statement: null,
            documentList: [],
            hint: null,
            custom_copy_data: null
        };
        return grain_copy_data;
    };
    GrainCopyService.prototype.createObjectGrainCopy = function () {
        var grain_copy = {
            id: null,
            subject_copy_id: null,
            grain_scheduled_id: null,
            grain_type_id: null,
            created: new Date().toISOString(),
            modified: new Date().toISOString(),
            grain_copy_data: this.createObjectGrainCopyData(),
            final_score: null,
            score: null,
            teacher_comment: null,
            is_deleted: null
        };
        return grain_copy;
    };
    GrainCopyService.prototype.createObjectGrainCopyFromGrain = function (grain) {
        var grain_copy = this.createObjectGrainCopy();
        grain_copy.grain_copy_data.title = grain.grain_data.title;
        grain_copy.grain_copy_data.max_score = grain.grain_data.max_score;
        grain_copy.grain_copy_data.statement = grain.grain_data.statement;
        grain_copy.grain_copy_data.documentList = grain.grain_data.documentList;
        grain_copy.grain_copy_data.hint = grain.grain_data.hint;
        return grain_copy;
    };
    GrainCopyService.prototype._getGrainCopyListBySubjectId = function (subject_id, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'GET',
            url: self.serverUrl + '/grainCopies/get',
            params: {
                "subject_id": subject_id,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    GrainCopyService.$inject = [
        'serverUrl',
        '$http'
    ];
    return GrainCopyService;
}());
var GrainScheduledService = (function () {
    function GrainScheduledService(GrainService) {
        this.grainService = GrainService;
    }
    GrainScheduledService.prototype.createObjectGrainScheduled = function () {
        var grain_scheduled = {
            id: null,
            subject_scheduled_id: null,
            grain_type_id: null,
            parent_grain_id: null,
            order: null,
            created: null,
            grain_data: this.grainService.createObjectGrain(),
            is_deleted: null
        };
        return grain_scheduled;
    };
    GrainScheduledService.prototype.createObjectGrainScheduledFromGrain = function (grain) {
        var grain_scheduled = this.createObjectGrainScheduled();
        grain_scheduled.grain_data = grain.grain_data;
        grain_scheduled.grain_type_id = grain.grain_type_id;
        grain_scheduled.parent_grain_id = grain.id;
        return grain_scheduled;
    };
    GrainScheduledService.$inject = [
        'GrainService'
    ];
    return GrainScheduledService;
}());
var GrainService = (function () {
    function GrainService(serverUrl, $http) {
        this.serverUrl = serverUrl;
        this.$http = $http;
        this._grainList = [];
        this._isSetGrainList = [];
        this._isSetGrainList[1] = true;
    }
    GrainService.prototype.grainListBySubjectId = function (subject_id) {
        return this._isSetGrainList[subject_id] ? this._grainList[subject_id] : [];
    };
    GrainService.prototype.isSetGrainListBySubjectId = function (subject_id) {
        return !!this._isSetGrainList[subject_id];
    };
    GrainService.prototype.createObjectGrain = function () {
        return {
            id: null,
            subject_id: null,
            grain_type_id: null,
            order: null,
            original_grain_id: null,
            created: new Date().toISOString(),
            modified: new Date().toISOString(),
            grain_data: {},
            is_library_grain: null
        };
    };
    GrainService.prototype.createObjectGrainData = function () {
        var grain_data = {
            title: null,
            max_score: null,
            statement: null,
            documentList: [],
            hint: null,
            correction: null,
            custom_data: {}
        };
        return grain_data;
    };
    GrainService.prototype.createGrain = function (grain, callbackSuccess, callBackFail) {
        var self = this;
        this._createGrain(grain, function (data) {
            self.addGrainToGrainList(grain);
            if (!self.hasGrainOrder(grain)) {
                self.setOrderToThisGrain(grain);
            }
            else {
            }
            callbackSuccess(data);
        }, function (err) {
            console.error(err);
        });
    };
    GrainService.prototype.hasGrainOrder = function (grain) {
        return !!grain.order;
    };
    GrainService.prototype.setOrderToThisGrain = function (grain) {
        if (!this._grainList[grain.subject_id]) {
            throw "List not found";
        }
        var max_order = null;
        angular.forEach(this._grainList[grain.subject_id], function (item_grain) {
            if (item_grain.order) {
                if (item_grain.order > max_order) {
                    max_order = item_grain.order;
                }
                if (item_grain.order > max_order) {
                    throw "Two grain have the same order";
                }
            }
            else {
                if (grain.id == item_grain.id) {
                }
                else {
                    console.error(grain);
                    throw "A grain have no order";
                }
            }
        });
        var new_order;
        if (max_order) {
            new_order = parseFloat(max_order) + 1;
        }
        else {
            new_order = 1;
        }
        grain.order = new_order;
    };
    GrainService.prototype.updateGrain = function (grain, callbackSuccess, callbackFail) {
        this._updateGrain(grain, function (data) {
            callbackSuccess(data);
        }, function (err) {
            console.error(err);
        });
    };
    GrainService.prototype.addGrainToGrainList = function (grain) {
        if (!this._grainList[grain.subject_id]) {
            this._grainList[grain.subject_id] = [];
        }
        if (this._grainList[grain.subject_id][grain.id]) {
        }
        this._grainList[grain.subject_id][grain.id] = grain;
    };
    GrainService.prototype.getGrainListBySubjectId = function (subject_id, callbackSuccess, callbackFail) {
        var self = this;
        if (this._isSetGrainList[subject_id]) {
            callbackSuccess(this._grainList[subject_id]);
        }
        else {
            this._getGrainListBySubjectId(subject_id, function (data) {
                self._grainList[subject_id] = data;
                self._isSetGrainList[subject_id] = true;
                callbackSuccess(data);
            }, callbackFail());
        }
    };
    GrainService.prototype.reorderGrain = function (grain, array_grain) {
        var currentPrevious;
        var previous = null;
        var next = null;
        var oneIterationAfterMatch = false;
        angular.forEach(array_grain, function (item_grain) {
            if (grain.id == item_grain.id) {
                previous = currentPrevious;
                oneIterationAfterMatch = true;
            }
            if (oneIterationAfterMatch == true) {
                next = item_grain;
                oneIterationAfterMatch = false;
            }
            currentPrevious = item_grain;
        });
        var average = null;
        if (previous && next) {
            average = (previous.order + next.order) / 2;
        }
        else {
            if (previous) {
                average = previous.order - 1;
            }
            else if (next) {
                average = next.order + 1;
            }
            else {
                throw "Not Possible";
            }
        }
        grain.order = average;
    };
    GrainService.prototype._getGrainListBySubjectId = function (subject_id, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'GET',
            url: self.serverUrl + '/grains/get',
            params: {
                "subject_id": subject_id,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    GrainService.prototype._updateGrain = function (grain, callbackSuccess, callbackFail) {
        grain.modified = new Date().toISOString();
        callbackSuccess(grain);
    };
    GrainService.prototype._createGrain = function (grain, callbackSuccess, callbackFail) {
        grain.id = Math.floor((Math.random() * 1000) + 1);
        callbackSuccess(grain);
    };
    GrainService.$inject = [
        'serverUrl',
        '$http'
    ];
    return GrainService;
}());
var GrainTypeService = (function () {
    function GrainTypeService() {
        this._cacheTypeIdToTypeName = [];
        this._cacheTypeNameToTypeId = [];
        this._cacheTypeIdToDirectiveEditName = [];
        this._grainTypeList = this.feedGrainTypeList();
        this._exerciseTypeList = this.setExerciseTypeList(this.feedGrainTypeList());
    }
    Object.defineProperty(GrainTypeService.prototype, "grainTypeList", {
        get: function () {
            return this._grainTypeList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GrainTypeService.prototype, "exerciseTypeList", {
        get: function () {
            return this._exerciseTypeList;
        },
        enumerable: true,
        configurable: true
    });
    GrainTypeService.prototype.setExerciseTypeList = function (exerciseTypeList) {
        var index = exerciseTypeList.indexOf(this.getStatementType(exerciseTypeList));
        if (index > -1) {
            exerciseTypeList.splice(index, 1);
            return exerciseTypeList;
        }
        else {
            console.error('indexOf statement null');
        }
    };
    GrainTypeService.prototype.getTypeDirectiveEditNameByGrainId = function (id) {
        var self = this;
        if (!self._cacheTypeIdToDirectiveEditName[id]) {
            angular.forEach(this._grainTypeList, function (grainType) {
                if (grainType.id == id) {
                    self._cacheTypeIdToDirectiveEditName[id] = grainType.directiveEditName;
                }
            });
        }
        return self._cacheTypeIdToDirectiveEditName[id];
    };
    GrainTypeService.prototype.getTypeNameByTypeId = function (id) {
        var res = null;
        angular.forEach(this._grainTypeList, function (grainType) {
            if (grainType.id == id) {
                res = grainType.name;
            }
        });
        return res;
    };
    GrainTypeService.prototype.getTypeIdByTypeName = function (name) {
        if (!this._cacheTypeNameToTypeId[name]) {
            var self = this;
            angular.forEach(this._grainTypeList, function (grainType) {
                if (grainType.name == name) {
                    self._cacheTypeNameToTypeId[name] = grainType.id;
                }
                else {
                }
            });
        }
        return this._cacheTypeNameToTypeId[name];
    };
    GrainTypeService.prototype.getStatementType = function (grainTypeList) {
        var grain_statement = null;
        angular.forEach(grainTypeList, function (grainType) {
            if (grainType.name == 'statement') {
                grain_statement = grainType;
            }
            else {
            }
        });
        if (grain_statement) {
            return grain_statement;
        }
        else {
            console.error('Statement not found in _grainTypeList');
        }
    };
    GrainTypeService.prototype.feedGrainTypeList = function () {
        return [
            {
                id: 1,
                name: "statement",
                publicName: "Enoncer",
                directiveEditName: "edit-statement",
                picture: "http://www.barmitzvah-online.com/wp-content/uploads/2013/12/question-300x300.jpg"
            },
            {
                id: 2,
                name: "openQuestion",
                publicName: "Question Libre",
                directiveEditName: "edit-open-question",
                picture: "http://www.barmitzvah-online.com/wp-content/uploads/2013/12/question-300x300.jpg"
            },
            {
                id: 3,
                name: "simpleAnswer",
                publicName: "Réponse Simple",
                directiveEditName: "edit-simple-answer",
                picture: "http://www.barmitzvah-online.com/wp-content/uploads/2013/12/question-300x300.jpg"
            }
        ];
    };
    GrainTypeService.$inject = [];
    return GrainTypeService;
}());
var SubjectService = (function () {
    function SubjectService(serverUrl, $http) {
        this.serverUrl = serverUrl;
        this.$http = $http;
        this._isSetSubjectList = false;
        this._subjectList = [];
        this._currentSubjectId = null;
    }
    Object.defineProperty(SubjectService.prototype, "subjectList", {
        get: function () {
            return this._subjectList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubjectService.prototype, "isSetSubjectList", {
        get: function () {
            return this._isSetSubjectList;
        },
        set: function (value) {
            this._isSetSubjectList = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubjectService.prototype, "currentSubjectId", {
        get: function () {
            if (!this._currentSubjectId) {
                console.error('_currentSubjectId not defined');
                console.error('ONLY DEV : _currentSubjectId set to 1');
                this._currentSubjectId = 1;
            }
            return this._currentSubjectId;
        },
        set: function (value) {
            this._currentSubjectId = value;
        },
        enumerable: true,
        configurable: true
    });
    SubjectService.prototype.createSubject = function (subject, callbackSuccess, callBackFail) {
        var self = this;
        this._createSubject(subject, function (data) {
            self.addSubjectToSubjectList(data);
            self._currentSubjectId = data.id;
            callbackSuccess(data);
        }, function (err) {
            console.error(err);
        });
    };
    SubjectService.prototype.updateSubject = function (subject, callbackSuccess, callbackFail) {
        this._updateSubject(subject, function (data) {
            this.addSubjectToSubjectList(data);
            callbackSuccess(data);
        }, function (err) {
            console.error(err);
        });
    };
    SubjectService.prototype.addSubjectToSubjectList = function (subject) {
        if (this._subjectList[subject.id]) {
        }
        this._subjectList[subject.id] = subject;
    };
    SubjectService.prototype.getSubjectList = function (params, callbackSuccess, callbackFail) {
        var self = this;
        if (this._isSetSubjectList) {
            callbackSuccess(this._subjectList);
        }
        else {
            this._getSubjectList(params, function (data) {
                self._subjectList = data;
                self._isSetSubjectList = true;
                callbackSuccess(data);
            }, callbackFail());
        }
    };
    SubjectService.prototype._getSubjectList = function (params, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'GET',
            url: self.serverUrl + '/subjects/get',
            params: {
                "user_id": params.user.id,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    SubjectService.prototype._updateSubject = function (subject, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'POST',
            url: self.serverUrl + '/subjects/update/' + subject.id,
            params: {
                "subject": subject,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    SubjectService.prototype._createSubject = function (subject, callbackSuccess, callbackFail) {
        subject.id = Math.floor((Math.random() * 1000) + 1);
        callbackSuccess(subject);
    };
    SubjectService.$inject = [
        'serverUrl',
        '$http'
    ];
    return SubjectService;
}());
var UserService = (function () {
    function UserService(serverUrl, $http) {
        this.serverUrl = serverUrl;
        this.$http = $http;
        this._isSetUserList = [];
        this._userList = [];
    }
    UserService.prototype.userById = function (user_id) {
        return this.isSetUserById(user_id) ? this._userList[user_id] : {};
    };
    UserService.prototype.isSetUserById = function (user_id) {
        return !!this._isSetUserList[user_id];
    };
    UserService.prototype.getUserById = function (user_id, callbackSuccess, callbackFail) {
        var self = this;
        if (this.isSetUserById(user_id)) {
            callbackSuccess(this._userList[user_id]);
        }
        else {
            this._getUserById(user_id, function (data) {
                self._userList[user_id] = data;
                self._isSetUserList[user_id] = true;
                callbackSuccess(data);
            }, callbackFail());
        }
    };
    UserService.prototype._getUserById = function (user_id, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'GET',
            url: self.serverUrl + '/users/get',
            params: {
                "user_id": user_id,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    UserService.$inject = [
        'serverUrl',
        '$http'
    ];
    return UserService;
}());
directives.push({
    name: "exerciseListTeacherEdit",
    injections: ['GrainTypeService', 'GrainCopyService', function (GrainTypeService, GrainCopyService) {
            return {
                restrict: "E",
                scope: {
                    grain: "="
                },
                templateUrl: 'exercizer/public/app/templates/directives/exercise_list/teacherEdit.html',
                link: function (scope, element, attrs) {
                    scope.getTypeDirectiveEditNameByCurrentGrain = function () {
                        return GrainTypeService.getTypeDirectiveEditNameByGrainId(scope.grain.grain_type_id);
                    };
                }
            };
        }]
});
directives.push({
    name: "editOpenQuestion",
    injections: [function () {
            return {
                restrict: "E",
                templateUrl: 'exercizer/public/app/components/open_question/templates/edit.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
var editSample = [function () {
        return {
            restrict: "E",
            templateUrl: 'exercizer/public/app/components/sample/templates/edit.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
directives.push({
    name: "editSimpleAnswer",
    injections: ['GrainService', 'SimpleAnswerService', function (GrainService, SimpleAnswerService) {
            return {
                restrict: "E",
                scope: {
                    grain: '=',
                },
                templateUrl: 'exercizer/public/app/components/simple_answer/templates/edit.html',
                link: function (scope, element, attrs) {
                    function init() {
                        if (scope.grain) {
                            var grain_data = GrainService.createObjectGrainData();
                            scope.grain.grain_data = grain_data;
                            var custom_data = SimpleAnswerService.createObjectCustomData();
                            scope.grain.grain_data.custom_data = custom_data;
                        }
                        else {
                            throw "Grain not found";
                        }
                    }
                    init();
                    scope.actionOnBlur = function () {
                        GrainService.updateGrain(scope.grain, function (data) {
                            console.info('Grain updated', data);
                        }, function (err) {
                            console.error(err);
                        });
                    };
                }
            };
        }]
});
directives.push({
    name: "performSimpleAnswer",
    injections: ['GrainCopyService', 'SimpleAnswerService', 'GrainScheduledService', function (GrainCopyService, SimpleAnswerService, GrainScheduledService) {
            return {
                restrict: "E",
                scope: {
                    grain: '=',
                },
                templateUrl: 'exercizer/public/app/components/simple_answer/templates/perform.html',
                link: function (scope, element, attrs) {
                    function init() {
                        scope.grainCopy = GrainCopyService.createObjectGrainCopyFromGrain(scope.grain);
                        scope.grainCopy.grain_copy_data.custom_copy_data = SimpleAnswerService.createObjectCustomCopyData();
                    }
                    init();
                    scope.clickNextQuestion = function () {
                        var grain_scheduled = GrainScheduledService.createObjectGrainScheduledFromGrain(scope.grain);
                        SimpleAnswerService.automaticCorrection(scope.grainCopy, grain_scheduled);
                    };
                    scope.$watch('grain', function () {
                        var custom_copy_data = scope.grainCopy.grain_copy_data.custom_copy_data;
                        scope.grainCopy = GrainCopyService.createObjectGrainCopyFromGrain(scope.grain);
                        scope.grainCopy.grain_copy_data.custom_copy_data = custom_copy_data;
                    }, true);
                }
            };
        }]
});
var SimpleAnswerService = (function () {
    function SimpleAnswerService() {
    }
    SimpleAnswerService.prototype.createObjectCustomData = function () {
        var custom_data = {
            correct_answer: null
        };
        return custom_data;
    };
    SimpleAnswerService.prototype.createObjectCustomCopyData = function () {
        var custom_copy_data = {
            student_answer: null
        };
        return custom_copy_data;
    };
    SimpleAnswerService.prototype.automaticCorrection = function (grain_copy, grain_scheduled) {
        var student_answer = grain_copy.grain_copy_data.custom_copy_data.student_answer;
        var correct_answer = grain_scheduled.grain_data.custom_data.correct_answer;
        if (student_answer == correct_answer) {
            console.log('GOOD');
        }
        else {
            console.log('BAD');
        }
    };
    SimpleAnswerService.$inject = [];
    return SimpleAnswerService;
}());
directives.push({
    name: "editStatement",
    injections: ['GrainService', 'StatementService', function (GrainService, StatementService) {
            return {
                restrict: "E",
                scope: {
                    grain: "="
                },
                templateUrl: 'exercizer/public/app/components/statement/templates/edit.html',
                link: function (scope, element, attrs) {
                    function init() {
                        if (scope.grain) {
                            var grain_data = GrainService.createObjectGrainData();
                            scope.grain.grain_data = grain_data;
                            var custom_data = StatementService.createObjectCustomData();
                            scope.grain.grain_data.custom_data = custom_data;
                        }
                        else {
                            throw "Grain not found";
                        }
                    }
                    init();
                    scope.actionOnBlur = function () {
                        GrainService.updateGrain(scope.grain, function (data) {
                            console.info('Grain updated', data);
                        }, function (err) {
                            console.error(err);
                        });
                    };
                }
            };
        }]
});
directives.push({
    name: "performStatement",
    injections: ['$sce', 'SimpleAnswerService', function ($sce, SimpleAnswerService) {
            return {
                restrict: "E",
                scope: {
                    grain: "="
                },
                templateUrl: 'exercizer/public/app/components/statement/templates/perform.html',
                link: function (scope, element, attrs) {
                    scope.$watch('grain', function () {
                        scope.statementHtml = $sce.trustAsHtml(scope.grain.grain_data.custom_data.statement);
                    }, true);
                }
            };
        }]
});
var StatementService = (function () {
    function StatementService() {
    }
    StatementService.prototype.createObjectCustomData = function () {
        var custom_data = {
            statement: null
        };
        return custom_data;
    };
    StatementService.prototype.createObjectCustomCopyData = function () {
        var custom_copy_data = {
            statement: null
        };
        return custom_copy_data;
    };
    StatementService.$inject = [];
    return StatementService;
}());
var editQuestionAddDocument = [function () {
        return {
            restrict: "E",
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/edit/editQuestionAddDocument.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var editQuestionCorrection = [function () {
        return {
            restrict: "E",
            scope: {
                correctionModel: "=",
                onBlurFunction: "&"
            },
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/edit/editQuestionCorrection.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var editQuestionHint = [function () {
        return {
            restrict: "E",
            scope: {
                hintModel: "=",
                onBlurFunction: "&"
            },
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/edit/editQuestionHint.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var editQuestionMaxScore = [function () {
        return {
            restrict: "E",
            scope: {
                maxScoreModel: "=",
                onBlurFunction: "&"
            },
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/edit/editQuestionMaxScore.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var editQuestionStatement = [function () {
        return {
            restrict: "E",
            scope: {
                statementModel: "=",
                onBlurFunction: "&"
            },
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/edit/editQuestionStatement.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var editQuestionTitle = [function () {
        return {
            restrict: "E",
            scope: {
                titleModel: "=",
                onBlurFunction: "&"
            },
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/editQuestionTitle.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
directives.push({
    name: "performQuestionMaxScore",
    injections: [function () {
            return {
                restrict: "E",
                scope: {
                    maxScore: '=',
                },
                templateUrl: 'exercizer/public/app/templates/directives/commonExercise/perform/performQuestionMaxScore.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
directives.push({
    name: "performQuestionStatement",
    injections: [function () {
            return {
                restrict: "E",
                scope: {
                    statement: '=',
                },
                templateUrl: 'exercizer/public/app/templates/directives/commonExercise/perform/performQuestionStatement.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
directives.push({
    name: "performQuestionTitle",
    injections: [function () {
            return {
                restrict: "E",
                scope: {
                    title: '=',
                },
                templateUrl: 'exercizer/public/app/templates/directives/commonExercise/perform/performQuestionTitle.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
directives.push({
    name: "performQuestionHint",
    injections: [function () {
            return {
                restrict: "E",
                scope: {
                    hint: '=',
                },
                templateUrl: 'exercizer/public/app/templates/directives/commonExercise/perform/performQuestionHint.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
routes.define(function ($routeProvider) {
    $routeProvider
        .when('/teacher/home', {
        action: 'teacherHome'
    })
        .when('/teacher/subject/create', {
        action: 'teacherSubjectCreate'
    })
        .when('/teacher/subject/edit', {
        action: 'teacherSubjectEdit'
    })
        .otherwise({
        redirectTo: '/teacher/home'
    });
});
var directives = [];
var controllers = [];
var services = [];
function ExercizerController($scope, $rootScope, model, template, route, date, $route) {
    route({
        teacherHome: function (params) {
            template.open('main', 'teacher-home');
        },
        teacherSubjectCreate: function (params) {
            template.open('main', 'teacher-subject-create');
        },
        teacherSubjectEdit: function (params) {
            template.open('main', 'teacher-subject-edit');
        }
    });
    $route.reload();
}
window.AngularExtensions = {
    init: function (module) {
        module.constant("serverUrl", "http://foo.com");
        module.service('SubjectService', SubjectService);
        module.service('GrainService', GrainService);
        module.service('GrainTypeService', GrainTypeService);
        module.service('SimpleAnswerService', SimpleAnswerService);
        module.service('GrainCopyService', GrainCopyService);
        module.service('GrainScheduledService', GrainScheduledService);
        module.service('StatementService', StatementService);
        module.controller('TeacherHomeCtrl', TeacherHomeCtrl);
        module.controller('TeacherCreateSubjectCtrl', TeacherCreateSubjectCtrl);
        module.controller('TeacherEditSubjectCtrl', TeacherEditSubjectCtrl);
        directives.forEach(function (item) {
            module.directive(item.name, item.injections);
        });
        module.directive("editQuestionTitle", editQuestionTitle);
        module.directive("editQuestionStatement", editQuestionStatement);
        module.directive("editQuestionMaxScore", editQuestionMaxScore);
        module.directive("editQuestionAddDocument", editQuestionAddDocument);
        module.directive("editQuestionHint", editQuestionHint);
        module.directive("editQuestionCorrection", editQuestionCorrection);
        module.directive("exercizerHelp", exercizerHelp);
        module.directive("exercizerFold", exercizerFold);
    }
};
var TeacherCreateSubjectCtrl = (function () {
    function TeacherCreateSubjectCtrl($location, SubjectService) {
        this.$location = $location;
        this.subjectService = SubjectService;
    }
    TeacherCreateSubjectCtrl.prototype.clickSaveSubject = function () {
        var self = this;
        this.subjectService.createSubject(this.subject, function (data) {
            self.$location.path('/teacher/subject/edit');
        }, function (err) {
            console.error(err);
        });
    };
    TeacherCreateSubjectCtrl.$inject = [
        '$location',
        'SubjectService',
    ];
    return TeacherCreateSubjectCtrl;
}());
var TeacherEditSubjectCtrl = (function () {
    function TeacherEditSubjectCtrl(GrainService, SubjectService, GrainTypeService) {
        this.grainService = GrainService;
        this.subjectService = SubjectService;
        this.grainTypeService = GrainTypeService;
    }
    Object.defineProperty(TeacherEditSubjectCtrl.prototype, "grainListByCurrentSubject", {
        get: function () {
            var subject_id = this.subjectService.currentSubjectId;
            return this.grainService.grainListBySubjectId(subject_id);
        },
        enumerable: true,
        configurable: true
    });
    TeacherEditSubjectCtrl.prototype.isNewGrain = function (grain) {
        if (grain) {
            if (grain.grain_type_id) {
                return "grain";
            }
            else {
                return "new";
            }
        }
    };
    TeacherEditSubjectCtrl.prototype.getTypeNameByTypeId = function (id) {
        return this.grainTypeService.getTypeNameByTypeId(id);
    };
    TeacherEditSubjectCtrl.$inject = [
        'GrainService',
        'SubjectService',
        'GrainTypeService'
    ];
    return TeacherEditSubjectCtrl;
}());
var TeacherHomeCtrl = (function () {
    function TeacherHomeCtrl($location) {
        this.$location = $location;
        console.log('TeacherHomeCtrl');
    }
    TeacherHomeCtrl.prototype.clickCreateNewSubject = function () {
        console.log('clickCreateNewSubject');
        this.$location.path('/teacher/subject/create');
    };
    ;
    TeacherHomeCtrl.$inject = [
        '$location',
    ];
    return TeacherHomeCtrl;
}());
directives.push({
    name: "addOneElement",
    injections: ['GrainService', 'SubjectService', function (GrainService, SubjectService) {
            return {
                restrict: "E",
                templateUrl: 'exercizer/public/app/templates/directives/addOneElement.html',
                link: function (scope, element, attrs) {
                    scope.clickCreateNewGrain = function () {
                        var grain = GrainService.createObjectGrain();
                        var subject_id = SubjectService.currentSubjectId;
                        grain.subject_id = subject_id;
                        GrainService.createGrain(grain, function (data) {
                            console.info('Grain created', data);
                        }, function (err) {
                            console.error(err);
                        });
                    };
                }
            };
        }]
});
var exercizerFold = [function () {
        return {
            restrict: "E",
            templateUrl: 'exercizer/public/app/templates/directives/exercizerFold.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var exercizerHelp = [function () {
        return {
            restrict: "E",
            templateUrl: 'exercizer/public/app/templates/directives/exercizerHelp.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
directives.push({
    name: "newGrain",
    injections: ['GrainTypeService', 'GrainService', function (GrainTypeService, GrainService) {
            return {
                restrict: "E",
                scope: {
                    grain: '='
                },
                templateUrl: 'exercizer/public/app/templates/directives/newGrain.html',
                link: function (scope, element, attrs) {
                    scope.state = 'statementOrQuestion';
                    scope.clickStatement = function () {
                        var grain_type_id = GrainTypeService.getTypeIdByTypeName("statement");
                        scope.grain.grain_type_id = grain_type_id;
                    };
                    scope.clickQuestion = function () {
                        scope.state = 'choiceExerciseType';
                    };
                    scope.exerciseTypeList = function () {
                        return GrainTypeService.exerciseTypeList;
                    };
                    scope.clickExerciseType = function (type) {
                        scope.grain.grain_type_id = type.id;
                        GrainService.updateGrain(scope.grain, function (data) {
                            console.info('Grain updated', data);
                        }, function (err) {
                            console.error(err);
                        });
                    };
                }
            };
        }]
});
directives.push({
    name: "subjectOrganizer",
    injections: [function () {
            return {
                restrict: "E",
                templateUrl: 'exercizer/public/app/templates/directives/subjectOrganizer.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
directives.push({
    name: 'subjectsTree',
    injections: [function () {
            return {
                restrict: 'E',
                templateUrl: 'exercizer/public/app/templates/directives/subjectsTree.html',
                link: function (scope, element, attrs) {
                    scope.showCreateFolder = attrs.showCreateFolder === 'true';
                }
            };
        }]
});
var CopyService = (function () {
    function CopyService(serverUrl, $http) {
        this.serverUrl = serverUrl;
        this.$http = $http;
        this._isSetCopyList = false;
        this._copyList = [];
    }
    Object.defineProperty(CopyService.prototype, "copyList", {
        get: function () {
            return this._copyList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CopyService.prototype, "isSetCopyList", {
        get: function () {
            return this._isSetCopyList;
        },
        set: function (value) {
            this._isSetCopyList = value;
        },
        enumerable: true,
        configurable: true
    });
    CopyService.prototype.addCopyToCopyList = function (copy) {
        if (this._copyList[copy.id]) {
        }
        this._copyList[copy.id] = copy;
    };
    CopyService.prototype.getCopyList = function (params, callbackSuccess, callbackFail) {
        var self = this;
        if (this._isSetCopyList) {
            callbackSuccess(this._copyList);
        }
        else {
            this._getCopyList(params, function (data) {
                self._copyList = data;
                self._isSetCopyList = true;
                callbackSuccess(data);
            }, callbackFail());
        }
    };
    CopyService.prototype._getCopyList = function (params, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'GET',
            url: self.serverUrl + '/copies/get',
            params: {
                "user_id": params.user.id,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    CopyService.$inject = [
        'serverUrl',
        '$http'
    ];
    return CopyService;
}());
var GrainCopyService = (function () {
    function GrainCopyService(serverUrl, $http) {
        this.serverUrl = serverUrl;
        this.$http = $http;
        this._grainCopyList = [];
        this._isSetGrainCopyList = [];
    }
    GrainCopyService.prototype.grainCopyListBySubjectId = function (subject_id) {
        return this._isSetGrainCopyList[subject_id] ? this._grainCopyList[subject_id] : [];
    };
    GrainCopyService.prototype.isSetGrainCopyListBySubjectId = function (subject_id) {
        return !!this._isSetGrainCopyList[subject_id];
    };
    GrainCopyService.prototype.getGrainCopyListBySubjectId = function (subject_id, callbackSuccess, callbackFail) {
        var self = this;
        if (this._isSetGrainCopyList[subject_id]) {
            callbackSuccess(this._grainCopyList[subject_id]);
        }
        else {
            this._getGrainCopyListBySubjectId(subject_id, function (data) {
                self._grainCopyList[subject_id] = data;
                self._isSetGrainCopyList[subject_id] = true;
                callbackSuccess(data);
            }, callbackFail());
        }
    };
    GrainCopyService.prototype.createObjectGrainCopyData = function () {
        var grain_copy_data = {
            title: null,
            max_score: null,
            statement: null,
            documentList: [],
            hint: null,
            custom_copy_data: null
        };
        return grain_copy_data;
    };
    GrainCopyService.prototype.createObjectGrainCopy = function () {
        var grain_copy = {
            id: null,
            subject_copy_id: null,
            grain_scheduled_id: null,
            grain_type_id: null,
            created: new Date().toISOString(),
            modified: new Date().toISOString(),
            grain_copy_data: this.createObjectGrainCopyData(),
            final_score: null,
            score: null,
            teacher_comment: null,
            is_deleted: null
        };
        return grain_copy;
    };
    GrainCopyService.prototype.createObjectGrainCopyFromGrain = function (grain) {
        var grain_copy = this.createObjectGrainCopy();
        grain_copy.grain_copy_data.title = grain.grain_data.title;
        grain_copy.grain_copy_data.max_score = grain.grain_data.max_score;
        grain_copy.grain_copy_data.statement = grain.grain_data.statement;
        grain_copy.grain_copy_data.documentList = grain.grain_data.documentList;
        grain_copy.grain_copy_data.hint = grain.grain_data.hint;
        return grain_copy;
    };
    GrainCopyService.prototype._getGrainCopyListBySubjectId = function (subject_id, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'GET',
            url: self.serverUrl + '/grainCopies/get',
            params: {
                "subject_id": subject_id,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    GrainCopyService.$inject = [
        'serverUrl',
        '$http'
    ];
    return GrainCopyService;
}());
var GrainScheduledService = (function () {
    function GrainScheduledService(GrainService) {
        this.grainService = GrainService;
    }
    GrainScheduledService.prototype.createObjectGrainScheduled = function () {
        var grain_scheduled = {
            id: null,
            subject_scheduled_id: null,
            grain_type_id: null,
            parent_grain_id: null,
            order: null,
            created: null,
            grain_data: this.grainService.createObjectGrain(),
            is_deleted: null
        };
        return grain_scheduled;
    };
    GrainScheduledService.prototype.createObjectGrainScheduledFromGrain = function (grain) {
        var grain_scheduled = this.createObjectGrainScheduled();
        grain_scheduled.grain_data = grain.grain_data;
        grain_scheduled.grain_type_id = grain.grain_type_id;
        grain_scheduled.parent_grain_id = grain.id;
        return grain_scheduled;
    };
    GrainScheduledService.$inject = [
        'GrainService'
    ];
    return GrainScheduledService;
}());
var GrainService = (function () {
    function GrainService(serverUrl, $http) {
        this.serverUrl = serverUrl;
        this.$http = $http;
        this._grainList = [];
        this._isSetGrainList = [];
        this._isSetGrainList[1] = true;
    }
    GrainService.prototype.grainListBySubjectId = function (subject_id) {
        return this._isSetGrainList[subject_id] ? this._grainList[subject_id] : [];
    };
    GrainService.prototype.isSetGrainListBySubjectId = function (subject_id) {
        return !!this._isSetGrainList[subject_id];
    };
    GrainService.prototype.createObjectGrain = function () {
        return {
            id: null,
            subject_id: null,
            grain_type_id: null,
            order: null,
            original_grain_id: null,
            created: new Date().toISOString(),
            modified: new Date().toISOString(),
            grain_data: {},
            is_library_grain: null
        };
    };
    GrainService.prototype.createObjectGrainData = function () {
        var grain_data = {
            title: null,
            max_score: null,
            statement: null,
            documentList: [],
            hint: null,
            correction: null,
            custom_data: {}
        };
        return grain_data;
    };
    GrainService.prototype.createGrain = function (grain, callbackSuccess, callBackFail) {
        var self = this;
        this._createGrain(grain, function (data) {
            self.addGrainToGrainList(grain);
            if (!self.hasGrainOrder(grain)) {
                self.setOrderToThisGrain(grain);
            }
            else {
            }
            callbackSuccess(data);
        }, function (err) {
            console.error(err);
        });
    };
    GrainService.prototype.hasGrainOrder = function (grain) {
        return !!grain.order;
    };
    GrainService.prototype.setOrderToThisGrain = function (grain) {
        if (!this._grainList[grain.subject_id]) {
            throw "List not found";
        }
        var max_order = null;
        angular.forEach(this._grainList[grain.subject_id], function (item_grain) {
            if (item_grain.order) {
                if (item_grain.order > max_order) {
                    max_order = item_grain.order;
                }
                if (item_grain.order > max_order) {
                    throw "Two grain have the same order";
                }
            }
            else {
                if (grain.id == item_grain.id) {
                }
                else {
                    console.error(grain);
                    throw "A grain have no order";
                }
            }
        });
        var new_order;
        if (max_order) {
            new_order = parseFloat(max_order) + 1;
        }
        else {
            new_order = 1;
        }
        grain.order = new_order;
    };
    GrainService.prototype.updateGrain = function (grain, callbackSuccess, callbackFail) {
        this._updateGrain(grain, function (data) {
            callbackSuccess(data);
        }, function (err) {
            console.error(err);
        });
    };
    GrainService.prototype.addGrainToGrainList = function (grain) {
        if (!this._grainList[grain.subject_id]) {
            this._grainList[grain.subject_id] = [];
        }
        if (this._grainList[grain.subject_id][grain.id]) {
        }
        this._grainList[grain.subject_id][grain.id] = grain;
    };
    GrainService.prototype.getGrainListBySubjectId = function (subject_id, callbackSuccess, callbackFail) {
        var self = this;
        if (this._isSetGrainList[subject_id]) {
            callbackSuccess(this._grainList[subject_id]);
        }
        else {
            this._getGrainListBySubjectId(subject_id, function (data) {
                self._grainList[subject_id] = data;
                self._isSetGrainList[subject_id] = true;
                callbackSuccess(data);
            }, callbackFail());
        }
    };
    GrainService.prototype.reorderGrain = function (grain, array_grain) {
        var currentPrevious;
        var previous = null;
        var next = null;
        var oneIterationAfterMatch = false;
        angular.forEach(array_grain, function (item_grain) {
            if (grain.id == item_grain.id) {
                previous = currentPrevious;
                oneIterationAfterMatch = true;
            }
            if (oneIterationAfterMatch == true) {
                next = item_grain;
                oneIterationAfterMatch = false;
            }
            currentPrevious = item_grain;
        });
        var average = null;
        if (previous && next) {
            average = (previous.order + next.order) / 2;
        }
        else {
            if (previous) {
                average = previous.order - 1;
            }
            else if (next) {
                average = next.order + 1;
            }
            else {
                throw "Not Possible";
            }
        }
        grain.order = average;
    };
    GrainService.prototype._getGrainListBySubjectId = function (subject_id, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'GET',
            url: self.serverUrl + '/grains/get',
            params: {
                "subject_id": subject_id,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    GrainService.prototype._updateGrain = function (grain, callbackSuccess, callbackFail) {
        grain.modified = new Date().toISOString();
        callbackSuccess(grain);
    };
    GrainService.prototype._createGrain = function (grain, callbackSuccess, callbackFail) {
        grain.id = Math.floor((Math.random() * 1000) + 1);
        callbackSuccess(grain);
    };
    GrainService.$inject = [
        'serverUrl',
        '$http'
    ];
    return GrainService;
}());
var GrainTypeService = (function () {
    function GrainTypeService() {
        this._cacheTypeIdToTypeName = [];
        this._cacheTypeNameToTypeId = [];
        this._cacheTypeIdToDirectiveEditName = [];
        this._grainTypeList = this.feedGrainTypeList();
        this._exerciseTypeList = this.setExerciseTypeList(this.feedGrainTypeList());
    }
    Object.defineProperty(GrainTypeService.prototype, "grainTypeList", {
        get: function () {
            return this._grainTypeList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GrainTypeService.prototype, "exerciseTypeList", {
        get: function () {
            return this._exerciseTypeList;
        },
        enumerable: true,
        configurable: true
    });
    GrainTypeService.prototype.setExerciseTypeList = function (exerciseTypeList) {
        var index = exerciseTypeList.indexOf(this.getStatementType(exerciseTypeList));
        if (index > -1) {
            exerciseTypeList.splice(index, 1);
            return exerciseTypeList;
        }
        else {
            console.error('indexOf statement null');
        }
    };
    GrainTypeService.prototype.getTypeDirectiveEditNameByGrainId = function (id) {
        var self = this;
        if (!self._cacheTypeIdToDirectiveEditName[id]) {
            angular.forEach(this._grainTypeList, function (grainType) {
                if (grainType.id == id) {
                    self._cacheTypeIdToDirectiveEditName[id] = grainType.directiveEditName;
                }
            });
        }
        return self._cacheTypeIdToDirectiveEditName[id];
    };
    GrainTypeService.prototype.getTypeNameByTypeId = function (id) {
        var res = null;
        angular.forEach(this._grainTypeList, function (grainType) {
            if (grainType.id == id) {
                res = grainType.name;
            }
        });
        return res;
    };
    GrainTypeService.prototype.getTypeIdByTypeName = function (name) {
        if (!this._cacheTypeNameToTypeId[name]) {
            var self = this;
            angular.forEach(this._grainTypeList, function (grainType) {
                if (grainType.name == name) {
                    self._cacheTypeNameToTypeId[name] = grainType.id;
                }
                else {
                }
            });
        }
        return this._cacheTypeNameToTypeId[name];
    };
    GrainTypeService.prototype.getStatementType = function (grainTypeList) {
        var grain_statement = null;
        angular.forEach(grainTypeList, function (grainType) {
            if (grainType.name == 'statement') {
                grain_statement = grainType;
            }
            else {
            }
        });
        if (grain_statement) {
            return grain_statement;
        }
        else {
            console.error('Statement not found in _grainTypeList');
        }
    };
    GrainTypeService.prototype.feedGrainTypeList = function () {
        return [
            {
                id: 1,
                name: "statement",
                publicName: "Enoncer",
                directiveEditName: "edit-statement",
                picture: "http://www.barmitzvah-online.com/wp-content/uploads/2013/12/question-300x300.jpg"
            },
            {
                id: 2,
                name: "openQuestion",
                publicName: "Question Libre",
                directiveEditName: "edit-open-question",
                picture: "http://www.barmitzvah-online.com/wp-content/uploads/2013/12/question-300x300.jpg"
            },
            {
                id: 3,
                name: "simpleAnswer",
                publicName: "Réponse Simple",
                directiveEditName: "edit-simple-answer",
                picture: "http://www.barmitzvah-online.com/wp-content/uploads/2013/12/question-300x300.jpg"
            }
        ];
    };
    GrainTypeService.$inject = [];
    return GrainTypeService;
}());
var SubjectService = (function () {
    function SubjectService(serverUrl, $http) {
        this.serverUrl = serverUrl;
        this.$http = $http;
        this._isSetSubjectList = false;
        this._subjectList = [];
        this._currentSubjectId = null;
    }
    Object.defineProperty(SubjectService.prototype, "subjectList", {
        get: function () {
            return this._subjectList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubjectService.prototype, "isSetSubjectList", {
        get: function () {
            return this._isSetSubjectList;
        },
        set: function (value) {
            this._isSetSubjectList = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubjectService.prototype, "currentSubjectId", {
        get: function () {
            if (!this._currentSubjectId) {
                console.error('_currentSubjectId not defined');
                console.error('ONLY DEV : _currentSubjectId set to 1');
                this._currentSubjectId = 1;
            }
            return this._currentSubjectId;
        },
        set: function (value) {
            this._currentSubjectId = value;
        },
        enumerable: true,
        configurable: true
    });
    SubjectService.prototype.createSubject = function (subject, callbackSuccess, callBackFail) {
        var self = this;
        this._createSubject(subject, function (data) {
            self.addSubjectToSubjectList(data);
            self._currentSubjectId = data.id;
            callbackSuccess(data);
        }, function (err) {
            console.error(err);
        });
    };
    SubjectService.prototype.updateSubject = function (subject, callbackSuccess, callbackFail) {
        this._updateSubject(subject, function (data) {
            this.addSubjectToSubjectList(data);
            callbackSuccess(data);
        }, function (err) {
            console.error(err);
        });
    };
    SubjectService.prototype.addSubjectToSubjectList = function (subject) {
        if (this._subjectList[subject.id]) {
        }
        this._subjectList[subject.id] = subject;
    };
    SubjectService.prototype.getSubjectList = function (params, callbackSuccess, callbackFail) {
        var self = this;
        if (this._isSetSubjectList) {
            callbackSuccess(this._subjectList);
        }
        else {
            this._getSubjectList(params, function (data) {
                self._subjectList = data;
                self._isSetSubjectList = true;
                callbackSuccess(data);
            }, callbackFail());
        }
    };
    SubjectService.prototype._getSubjectList = function (params, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'GET',
            url: self.serverUrl + '/subjects/get',
            params: {
                "user_id": params.user.id,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    SubjectService.prototype._updateSubject = function (subject, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'POST',
            url: self.serverUrl + '/subjects/update/' + subject.id,
            params: {
                "subject": subject,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    SubjectService.prototype._createSubject = function (subject, callbackSuccess, callbackFail) {
        subject.id = Math.floor((Math.random() * 1000) + 1);
        callbackSuccess(subject);
    };
    SubjectService.$inject = [
        'serverUrl',
        '$http'
    ];
    return SubjectService;
}());
var UserService = (function () {
    function UserService(serverUrl, $http) {
        this.serverUrl = serverUrl;
        this.$http = $http;
        this._isSetUserList = [];
        this._userList = [];
    }
    UserService.prototype.userById = function (user_id) {
        return this.isSetUserById(user_id) ? this._userList[user_id] : {};
    };
    UserService.prototype.isSetUserById = function (user_id) {
        return !!this._isSetUserList[user_id];
    };
    UserService.prototype.getUserById = function (user_id, callbackSuccess, callbackFail) {
        var self = this;
        if (this.isSetUserById(user_id)) {
            callbackSuccess(this._userList[user_id]);
        }
        else {
            this._getUserById(user_id, function (data) {
                self._userList[user_id] = data;
                self._isSetUserList[user_id] = true;
                callbackSuccess(data);
            }, callbackFail());
        }
    };
    UserService.prototype._getUserById = function (user_id, callbackSuccess, callbackFail) {
        var req;
        var self = this;
        req = this.$http({
            method: 'GET',
            url: self.serverUrl + '/users/get',
            params: {
                "user_id": user_id,
            },
            paramSerializer: '$httpParamSerializerJQLike'
        });
        req
            .success(function (data, status, headers, config) {
            if (status == 200) {
                callbackSuccess(data);
            }
            else {
                callbackFail(data);
            }
        })
            .error(function (data, status, headers, config) {
            console.error(data);
            console.error(status);
            console.error(headers);
            console.error(config);
            callbackFail(data);
        });
    };
    UserService.$inject = [
        'serverUrl',
        '$http'
    ];
    return UserService;
}());
directives.push({
    name: "exerciseListTeacherEdit",
    injections: ['GrainTypeService', 'GrainCopyService', function (GrainTypeService, GrainCopyService) {
            return {
                restrict: "E",
                scope: {
                    grain: "="
                },
                templateUrl: 'exercizer/public/app/templates/directives/exercise_list/teacherEdit.html',
                link: function (scope, element, attrs) {
                    scope.getTypeDirectiveEditNameByCurrentGrain = function () {
                        return GrainTypeService.getTypeDirectiveEditNameByGrainId(scope.grain.grain_type_id);
                    };
                }
            };
        }]
});
directives.push({
    name: "editOpenQuestion",
    injections: [function () {
            return {
                restrict: "E",
                templateUrl: 'exercizer/public/app/components/open_question/templates/edit.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
var editSample = [function () {
        return {
            restrict: "E",
            templateUrl: 'exercizer/public/app/components/sample/templates/edit.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
directives.push({
    name: "editSimpleAnswer",
    injections: ['GrainService', 'SimpleAnswerService', function (GrainService, SimpleAnswerService) {
            return {
                restrict: "E",
                scope: {
                    grain: '=',
                },
                templateUrl: 'exercizer/public/app/components/simple_answer/templates/edit.html',
                link: function (scope, element, attrs) {
                    function init() {
                        if (scope.grain) {
                            var grain_data = GrainService.createObjectGrainData();
                            scope.grain.grain_data = grain_data;
                            var custom_data = SimpleAnswerService.createObjectCustomData();
                            scope.grain.grain_data.custom_data = custom_data;
                        }
                        else {
                            throw "Grain not found";
                        }
                    }
                    init();
                    scope.actionOnBlur = function () {
                        GrainService.updateGrain(scope.grain, function (data) {
                            console.info('Grain updated', data);
                        }, function (err) {
                            console.error(err);
                        });
                    };
                }
            };
        }]
});
directives.push({
    name: "performSimpleAnswer",
    injections: ['GrainCopyService', 'SimpleAnswerService', 'GrainScheduledService', function (GrainCopyService, SimpleAnswerService, GrainScheduledService) {
            return {
                restrict: "E",
                scope: {
                    grain: '=',
                },
                templateUrl: 'exercizer/public/app/components/simple_answer/templates/perform.html',
                link: function (scope, element, attrs) {
                    function init() {
                        scope.grainCopy = GrainCopyService.createObjectGrainCopyFromGrain(scope.grain);
                        scope.grainCopy.grain_copy_data.custom_copy_data = SimpleAnswerService.createObjectCustomCopyData();
                    }
                    init();
                    scope.clickNextQuestion = function () {
                        var grain_scheduled = GrainScheduledService.createObjectGrainScheduledFromGrain(scope.grain);
                        SimpleAnswerService.automaticCorrection(scope.grainCopy, grain_scheduled);
                    };
                    scope.$watch('grain', function () {
                        var custom_copy_data = scope.grainCopy.grain_copy_data.custom_copy_data;
                        scope.grainCopy = GrainCopyService.createObjectGrainCopyFromGrain(scope.grain);
                        scope.grainCopy.grain_copy_data.custom_copy_data = custom_copy_data;
                    }, true);
                }
            };
        }]
});
var SimpleAnswerService = (function () {
    function SimpleAnswerService() {
    }
    SimpleAnswerService.prototype.createObjectCustomData = function () {
        var custom_data = {
            correct_answer: null
        };
        return custom_data;
    };
    SimpleAnswerService.prototype.createObjectCustomCopyData = function () {
        var custom_copy_data = {
            student_answer: null
        };
        return custom_copy_data;
    };
    SimpleAnswerService.prototype.automaticCorrection = function (grain_copy, grain_scheduled) {
        var student_answer = grain_copy.grain_copy_data.custom_copy_data.student_answer;
        var correct_answer = grain_scheduled.grain_data.custom_data.correct_answer;
        if (student_answer == correct_answer) {
            console.log('GOOD');
        }
        else {
            console.log('BAD');
        }
    };
    SimpleAnswerService.$inject = [];
    return SimpleAnswerService;
}());
directives.push({
    name: "editStatement",
    injections: ['GrainService', 'StatementService', function (GrainService, StatementService) {
            return {
                restrict: "E",
                scope: {
                    grain: "="
                },
                templateUrl: 'exercizer/public/app/components/statement/templates/edit.html',
                link: function (scope, element, attrs) {
                    function init() {
                        if (scope.grain) {
                            var grain_data = GrainService.createObjectGrainData();
                            scope.grain.grain_data = grain_data;
                            var custom_data = StatementService.createObjectCustomData();
                            scope.grain.grain_data.custom_data = custom_data;
                        }
                        else {
                            throw "Grain not found";
                        }
                    }
                    init();
                    scope.actionOnBlur = function () {
                        GrainService.updateGrain(scope.grain, function (data) {
                            console.info('Grain updated', data);
                        }, function (err) {
                            console.error(err);
                        });
                    };
                }
            };
        }]
});
directives.push({
    name: "performStatement",
    injections: ['$sce', 'SimpleAnswerService', function ($sce, SimpleAnswerService) {
            return {
                restrict: "E",
                scope: {
                    grain: "="
                },
                templateUrl: 'exercizer/public/app/components/statement/templates/perform.html',
                link: function (scope, element, attrs) {
                    scope.$watch('grain', function () {
                        scope.statementHtml = $sce.trustAsHtml(scope.grain.grain_data.custom_data.statement);
                    }, true);
                }
            };
        }]
});
var StatementService = (function () {
    function StatementService() {
    }
    StatementService.prototype.createObjectCustomData = function () {
        var custom_data = {
            statement: null
        };
        return custom_data;
    };
    StatementService.prototype.createObjectCustomCopyData = function () {
        var custom_copy_data = {
            statement: null
        };
        return custom_copy_data;
    };
    StatementService.$inject = [];
    return StatementService;
}());
var editQuestionAddDocument = [function () {
        return {
            restrict: "E",
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/edit/editQuestionAddDocument.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var editQuestionCorrection = [function () {
        return {
            restrict: "E",
            scope: {
                correctionModel: "=",
                onBlurFunction: "&"
            },
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/edit/editQuestionCorrection.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var editQuestionHint = [function () {
        return {
            restrict: "E",
            scope: {
                hintModel: "=",
                onBlurFunction: "&"
            },
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/edit/editQuestionHint.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var editQuestionMaxScore = [function () {
        return {
            restrict: "E",
            scope: {
                maxScoreModel: "=",
                onBlurFunction: "&"
            },
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/edit/editQuestionMaxScore.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var editQuestionStatement = [function () {
        return {
            restrict: "E",
            scope: {
                statementModel: "=",
                onBlurFunction: "&"
            },
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/edit/editQuestionStatement.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
var editQuestionTitle = [function () {
        return {
            restrict: "E",
            scope: {
                titleModel: "=",
                onBlurFunction: "&"
            },
            templateUrl: 'exercizer/public/app/templates/directives/commonExercise/editQuestionTitle.html',
            link: function (scope, element, attrs) {
            }
        };
    }];
directives.push({
    name: "performQuestionMaxScore",
    injections: [function () {
            return {
                restrict: "E",
                scope: {
                    maxScore: '=',
                },
                templateUrl: 'exercizer/public/app/templates/directives/commonExercise/perform/performQuestionMaxScore.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
directives.push({
    name: "performQuestionStatement",
    injections: [function () {
            return {
                restrict: "E",
                scope: {
                    statement: '=',
                },
                templateUrl: 'exercizer/public/app/templates/directives/commonExercise/perform/performQuestionStatement.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
directives.push({
    name: "performQuestionTitle",
    injections: [function () {
            return {
                restrict: "E",
                scope: {
                    title: '=',
                },
                templateUrl: 'exercizer/public/app/templates/directives/commonExercise/perform/performQuestionTitle.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
directives.push({
    name: "performQuestionHint",
    injections: [function () {
            return {
                restrict: "E",
                scope: {
                    hint: '=',
                },
                templateUrl: 'exercizer/public/app/templates/directives/commonExercise/perform/performQuestionHint.html',
                link: function (scope, element, attrs) {
                }
            };
        }]
});
